// Code generated by "enumer -type=Pill -json"; DO NOT EDIT.

//
package main

import (
	"encoding/json"
	"fmt"
)

const _PillName = "PlaceboAspirinIbuprofenParacetamol"

var _PillIndex = [...]uint8{0, 7, 14, 23, 34}

func (i Pill) String() string {
	if i < 0 || i >= Pill(len(_PillIndex)-1) {
		return fmt.Sprintf("Pill(%d)", i)
	}
	return _PillName[_PillIndex[i]:_PillIndex[i+1]]
}

var _PillValues = []Pill{0, 1, 2, 3}

var _PillNameToValueMap = map[string]Pill{
	_PillName[0:7]:   0,
	_PillName[7:14]:  1,
	_PillName[14:23]: 2,
	_PillName[23:34]: 3,
}

// PillString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func PillString(s string) (Pill, error) {
	if val, ok := _PillNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Pill values", s)
}

// PillValues returns all values of the enum
func PillValues() []Pill {
	return _PillValues
}

// IsAPill returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Pill) IsAPill() bool {
	for _, v := range _PillValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Pill
func (i Pill) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Pill
func (i *Pill) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Pill should be a string, got %s", data)
	}

	var err error
	*i, err = PillString(s)
	return err
}
